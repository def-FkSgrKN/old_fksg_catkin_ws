// Generated by gencpp from file find_my_mates/OdomMoveRequest.msg
// DO NOT EDIT!


#ifndef FIND_MY_MATES_MESSAGE_ODOMMOVEREQUEST_H
#define FIND_MY_MATES_MESSAGE_ODOMMOVEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace find_my_mates
{
template <class ContainerAllocator>
struct OdomMoveRequest_
{
  typedef OdomMoveRequest_<ContainerAllocator> Type;

  OdomMoveRequest_()
    : forward_back()
    , distance(0.0)
    , left_right()
    , angle(0.0)  {
    }
  OdomMoveRequest_(const ContainerAllocator& _alloc)
    : forward_back(_alloc)
    , distance(0.0)
    , left_right(_alloc)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _forward_back_type;
  _forward_back_type forward_back;

   typedef double _distance_type;
  _distance_type distance;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _left_right_type;
  _left_right_type left_right;

   typedef double _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OdomMoveRequest_

typedef ::find_my_mates::OdomMoveRequest_<std::allocator<void> > OdomMoveRequest;

typedef boost::shared_ptr< ::find_my_mates::OdomMoveRequest > OdomMoveRequestPtr;
typedef boost::shared_ptr< ::find_my_mates::OdomMoveRequest const> OdomMoveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::find_my_mates::OdomMoveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::find_my_mates::OdomMoveRequest_<ContainerAllocator1> & lhs, const ::find_my_mates::OdomMoveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.forward_back == rhs.forward_back &&
    lhs.distance == rhs.distance &&
    lhs.left_right == rhs.left_right &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::find_my_mates::OdomMoveRequest_<ContainerAllocator1> & lhs, const ::find_my_mates::OdomMoveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace find_my_mates

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "192a34fbac3a4af8b54e13874511df03";
  }

  static const char* value(const ::find_my_mates::OdomMoveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x192a34fbac3a4af8ULL;
  static const uint64_t static_value2 = 0xb54e13874511df03ULL;
};

template<class ContainerAllocator>
struct DataType< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "find_my_mates/OdomMoveRequest";
  }

  static const char* value(const ::find_my_mates::OdomMoveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string forward_back # 直進方向 (\"forward\" or \"back\")\n"
"float64 distance # 直進する距離 (単位: m)\n"
"string left_right # 回転方向（\"left\" or \"right\"）\n"
"float64 angle   # 回転する角度（単位: rad）\n"
;
  }

  static const char* value(const ::find_my_mates::OdomMoveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.forward_back);
      stream.next(m.distance);
      stream.next(m.left_right);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OdomMoveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::find_my_mates::OdomMoveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::find_my_mates::OdomMoveRequest_<ContainerAllocator>& v)
  {
    s << indent << "forward_back: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.forward_back);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "left_right: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.left_right);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIND_MY_MATES_MESSAGE_ODOMMOVEREQUEST_H
