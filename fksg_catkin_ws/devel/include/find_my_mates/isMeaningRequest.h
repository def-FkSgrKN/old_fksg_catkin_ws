// Generated by gencpp from file find_my_mates/isMeaningRequest.msg
// DO NOT EDIT!


#ifndef FIND_MY_MATES_MESSAGE_ISMEANINGREQUEST_H
#define FIND_MY_MATES_MESSAGE_ISMEANINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace find_my_mates
{
template <class ContainerAllocator>
struct isMeaningRequest_
{
  typedef isMeaningRequest_<ContainerAllocator> Type;

  isMeaningRequest_()
    : text()
    , word_list()  {
    }
  isMeaningRequest_(const ContainerAllocator& _alloc)
    : text(_alloc)
    , word_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _word_list_type;
  _word_list_type word_list;





  typedef boost::shared_ptr< ::find_my_mates::isMeaningRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::find_my_mates::isMeaningRequest_<ContainerAllocator> const> ConstPtr;

}; // struct isMeaningRequest_

typedef ::find_my_mates::isMeaningRequest_<std::allocator<void> > isMeaningRequest;

typedef boost::shared_ptr< ::find_my_mates::isMeaningRequest > isMeaningRequestPtr;
typedef boost::shared_ptr< ::find_my_mates::isMeaningRequest const> isMeaningRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::find_my_mates::isMeaningRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::find_my_mates::isMeaningRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::find_my_mates::isMeaningRequest_<ContainerAllocator1> & lhs, const ::find_my_mates::isMeaningRequest_<ContainerAllocator2> & rhs)
{
  return lhs.text == rhs.text &&
    lhs.word_list == rhs.word_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::find_my_mates::isMeaningRequest_<ContainerAllocator1> & lhs, const ::find_my_mates::isMeaningRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace find_my_mates

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::find_my_mates::isMeaningRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::find_my_mates::isMeaningRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_my_mates::isMeaningRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_my_mates::isMeaningRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_my_mates::isMeaningRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_my_mates::isMeaningRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::find_my_mates::isMeaningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8f3042d0490ba68702b99bb012d2499";
  }

  static const char* value(const ::find_my_mates::isMeaningRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8f3042d0490ba68ULL;
  static const uint64_t static_value2 = 0x702b99bb012d2499ULL;
};

template<class ContainerAllocator>
struct DataType< ::find_my_mates::isMeaningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "find_my_mates/isMeaningRequest";
  }

  static const char* value(const ::find_my_mates::isMeaningRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::find_my_mates::isMeaningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string text\n"
"string[] word_list\n"
;
  }

  static const char* value(const ::find_my_mates::isMeaningRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::find_my_mates::isMeaningRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.text);
      stream.next(m.word_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct isMeaningRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::find_my_mates::isMeaningRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::find_my_mates::isMeaningRequest_<ContainerAllocator>& v)
  {
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
    s << indent << "word_list[]" << std::endl;
    for (size_t i = 0; i < v.word_list.size(); ++i)
    {
      s << indent << "  word_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.word_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIND_MY_MATES_MESSAGE_ISMEANINGREQUEST_H
