// Generated by gencpp from file find_my_mates/ArmAction.msg
// DO NOT EDIT!


#ifndef FIND_MY_MATES_MESSAGE_ARMACTION_H
#define FIND_MY_MATES_MESSAGE_ARMACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace find_my_mates
{
template <class ContainerAllocator>
struct ArmAction_
{
  typedef ArmAction_<ContainerAllocator> Type;

  ArmAction_()
    : joint()
    , gripper()
    , time(0.0)  {
      joint.assign(0.0);
  }
  ArmAction_(const ContainerAllocator& _alloc)
    : joint()
    , gripper(_alloc)
    , time(0.0)  {
  (void)_alloc;
      joint.assign(0.0);
  }



   typedef boost::array<float, 4>  _joint_type;
  _joint_type joint;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gripper_type;
  _gripper_type gripper;

   typedef float _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::find_my_mates::ArmAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::find_my_mates::ArmAction_<ContainerAllocator> const> ConstPtr;

}; // struct ArmAction_

typedef ::find_my_mates::ArmAction_<std::allocator<void> > ArmAction;

typedef boost::shared_ptr< ::find_my_mates::ArmAction > ArmActionPtr;
typedef boost::shared_ptr< ::find_my_mates::ArmAction const> ArmActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::find_my_mates::ArmAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::find_my_mates::ArmAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::find_my_mates::ArmAction_<ContainerAllocator1> & lhs, const ::find_my_mates::ArmAction_<ContainerAllocator2> & rhs)
{
  return lhs.joint == rhs.joint &&
    lhs.gripper == rhs.gripper &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::find_my_mates::ArmAction_<ContainerAllocator1> & lhs, const ::find_my_mates::ArmAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace find_my_mates

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::find_my_mates::ArmAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::find_my_mates::ArmAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_my_mates::ArmAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_my_mates::ArmAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_my_mates::ArmAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_my_mates::ArmAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::find_my_mates::ArmAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12bc62c4dc4e19a620850df3a77d3360";
  }

  static const char* value(const ::find_my_mates::ArmAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12bc62c4dc4e19a6ULL;
  static const uint64_t static_value2 = 0x20850df3a77d3360ULL;
};

template<class ContainerAllocator>
struct DataType< ::find_my_mates::ArmAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "find_my_mates/ArmAction";
  }

  static const char* value(const ::find_my_mates::ArmAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::find_my_mates::ArmAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] joint\n"
"string gripper\n"
"float32 time\n"
;
  }

  static const char* value(const ::find_my_mates::ArmAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::find_my_mates::ArmAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint);
      stream.next(m.gripper);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::find_my_mates::ArmAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::find_my_mates::ArmAction_<ContainerAllocator>& v)
  {
    s << indent << "joint[]" << std::endl;
    for (size_t i = 0; i < v.joint.size(); ++i)
    {
      s << indent << "  joint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint[i]);
    }
    s << indent << "gripper: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gripper);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIND_MY_MATES_MESSAGE_ARMACTION_H
