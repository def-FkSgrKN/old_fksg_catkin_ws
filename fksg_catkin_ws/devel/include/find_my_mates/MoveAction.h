// Generated by gencpp from file find_my_mates/MoveAction.msg
// DO NOT EDIT!


#ifndef FIND_MY_MATES_MESSAGE_MOVEACTION_H
#define FIND_MY_MATES_MESSAGE_MOVEACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace find_my_mates
{
template <class ContainerAllocator>
struct MoveAction_
{
  typedef MoveAction_<ContainerAllocator> Type;

  MoveAction_()
    : direction()
    , linear_speed(0.0)
    , angle_speed(0.0)
    , time(0.0)
    , distance()  {
    }
  MoveAction_(const ContainerAllocator& _alloc)
    : direction(_alloc)
    , linear_speed(0.0)
    , angle_speed(0.0)
    , time(0.0)
    , distance(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _direction_type;
  _direction_type direction;

   typedef float _linear_speed_type;
  _linear_speed_type linear_speed;

   typedef float _angle_speed_type;
  _angle_speed_type angle_speed;

   typedef float _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::find_my_mates::MoveAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::find_my_mates::MoveAction_<ContainerAllocator> const> ConstPtr;

}; // struct MoveAction_

typedef ::find_my_mates::MoveAction_<std::allocator<void> > MoveAction;

typedef boost::shared_ptr< ::find_my_mates::MoveAction > MoveActionPtr;
typedef boost::shared_ptr< ::find_my_mates::MoveAction const> MoveActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::find_my_mates::MoveAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::find_my_mates::MoveAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::find_my_mates::MoveAction_<ContainerAllocator1> & lhs, const ::find_my_mates::MoveAction_<ContainerAllocator2> & rhs)
{
  return lhs.direction == rhs.direction &&
    lhs.linear_speed == rhs.linear_speed &&
    lhs.angle_speed == rhs.angle_speed &&
    lhs.time == rhs.time &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::find_my_mates::MoveAction_<ContainerAllocator1> & lhs, const ::find_my_mates::MoveAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace find_my_mates

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::find_my_mates::MoveAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::find_my_mates::MoveAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_my_mates::MoveAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_my_mates::MoveAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_my_mates::MoveAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_my_mates::MoveAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::find_my_mates::MoveAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63063957bf56a9813aee72669e9f2dba";
  }

  static const char* value(const ::find_my_mates::MoveAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63063957bf56a981ULL;
  static const uint64_t static_value2 = 0x3aee72669e9f2dbaULL;
};

template<class ContainerAllocator>
struct DataType< ::find_my_mates::MoveAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "find_my_mates/MoveAction";
  }

  static const char* value(const ::find_my_mates::MoveAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::find_my_mates::MoveAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string direction\n"
"float32 linear_speed\n"
"float32 angle_speed\n"
"float32 time\n"
"string distance\n"
;
  }

  static const char* value(const ::find_my_mates::MoveAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::find_my_mates::MoveAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.direction);
      stream.next(m.linear_speed);
      stream.next(m.angle_speed);
      stream.next(m.time);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::find_my_mates::MoveAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::find_my_mates::MoveAction_<ContainerAllocator>& v)
  {
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.direction);
    s << indent << "linear_speed: ";
    Printer<float>::stream(s, indent + "  ", v.linear_speed);
    s << indent << "angle_speed: ";
    Printer<float>::stream(s, indent + "  ", v.angle_speed);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "distance: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIND_MY_MATES_MESSAGE_MOVEACTION_H
