// Generated by gencpp from file detect_suspicious_person/ImgData.msg
// DO NOT EDIT!


#ifndef DETECT_SUSPICIOUS_PERSON_MESSAGE_IMGDATA_H
#define DETECT_SUSPICIOUS_PERSON_MESSAGE_IMGDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detect_suspicious_person
{
template <class ContainerAllocator>
struct ImgData_
{
  typedef ImgData_<ContainerAllocator> Type;

  ImgData_()
    : age_push()
    , sex_push()
    , up_color_push()
    , down_color_push()
    , glasstf_push()  {
    }
  ImgData_(const ContainerAllocator& _alloc)
    : age_push(_alloc)
    , sex_push(_alloc)
    , up_color_push(_alloc)
    , down_color_push(_alloc)
    , glasstf_push(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _age_push_type;
  _age_push_type age_push;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sex_push_type;
  _sex_push_type sex_push;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _up_color_push_type;
  _up_color_push_type up_color_push;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _down_color_push_type;
  _down_color_push_type down_color_push;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _glasstf_push_type;
  _glasstf_push_type glasstf_push;





  typedef boost::shared_ptr< ::detect_suspicious_person::ImgData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detect_suspicious_person::ImgData_<ContainerAllocator> const> ConstPtr;

}; // struct ImgData_

typedef ::detect_suspicious_person::ImgData_<std::allocator<void> > ImgData;

typedef boost::shared_ptr< ::detect_suspicious_person::ImgData > ImgDataPtr;
typedef boost::shared_ptr< ::detect_suspicious_person::ImgData const> ImgDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detect_suspicious_person::ImgData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detect_suspicious_person::ImgData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detect_suspicious_person::ImgData_<ContainerAllocator1> & lhs, const ::detect_suspicious_person::ImgData_<ContainerAllocator2> & rhs)
{
  return lhs.age_push == rhs.age_push &&
    lhs.sex_push == rhs.sex_push &&
    lhs.up_color_push == rhs.up_color_push &&
    lhs.down_color_push == rhs.down_color_push &&
    lhs.glasstf_push == rhs.glasstf_push;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detect_suspicious_person::ImgData_<ContainerAllocator1> & lhs, const ::detect_suspicious_person::ImgData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detect_suspicious_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::detect_suspicious_person::ImgData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detect_suspicious_person::ImgData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_suspicious_person::ImgData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_suspicious_person::ImgData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_suspicious_person::ImgData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_suspicious_person::ImgData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detect_suspicious_person::ImgData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b89fe16ae11edf8041200798af18005b";
  }

  static const char* value(const ::detect_suspicious_person::ImgData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb89fe16ae11edf80ULL;
  static const uint64_t static_value2 = 0x41200798af18005bULL;
};

template<class ContainerAllocator>
struct DataType< ::detect_suspicious_person::ImgData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detect_suspicious_person/ImgData";
  }

  static const char* value(const ::detect_suspicious_person::ImgData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detect_suspicious_person::ImgData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string age_push\n"
"string sex_push\n"
"string up_color_push\n"
"string down_color_push\n"
"string glasstf_push\n"
;
  }

  static const char* value(const ::detect_suspicious_person::ImgData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detect_suspicious_person::ImgData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.age_push);
      stream.next(m.sex_push);
      stream.next(m.up_color_push);
      stream.next(m.down_color_push);
      stream.next(m.glasstf_push);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImgData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detect_suspicious_person::ImgData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detect_suspicious_person::ImgData_<ContainerAllocator>& v)
  {
    s << indent << "age_push: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.age_push);
    s << indent << "sex_push: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sex_push);
    s << indent << "up_color_push: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.up_color_push);
    s << indent << "down_color_push: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.down_color_push);
    s << indent << "glasstf_push: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.glasstf_push);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECT_SUSPICIOUS_PERSON_MESSAGE_IMGDATA_H
