// Generated by gencpp from file detect_suspicious_person/Camera_msgRequest.msg
// DO NOT EDIT!


#ifndef DETECT_SUSPICIOUS_PERSON_MESSAGE_CAMERA_MSGREQUEST_H
#define DETECT_SUSPICIOUS_PERSON_MESSAGE_CAMERA_MSGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detect_suspicious_person
{
template <class ContainerAllocator>
struct Camera_msgRequest_
{
  typedef Camera_msgRequest_<ContainerAllocator> Type;

  Camera_msgRequest_()
    : w()
    , n(0)  {
    }
  Camera_msgRequest_(const ContainerAllocator& _alloc)
    : w(_alloc)
    , n(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _w_type;
  _w_type w;

   typedef int16_t _n_type;
  _n_type n;





  typedef boost::shared_ptr< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Camera_msgRequest_

typedef ::detect_suspicious_person::Camera_msgRequest_<std::allocator<void> > Camera_msgRequest;

typedef boost::shared_ptr< ::detect_suspicious_person::Camera_msgRequest > Camera_msgRequestPtr;
typedef boost::shared_ptr< ::detect_suspicious_person::Camera_msgRequest const> Camera_msgRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator1> & lhs, const ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator2> & rhs)
{
  return lhs.w == rhs.w &&
    lhs.n == rhs.n;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator1> & lhs, const ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detect_suspicious_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "841c8c331441384034cd51dbb1713773";
  }

  static const char* value(const ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x841c8c3314413840ULL;
  static const uint64_t static_value2 = 0x34cd51dbb1713773ULL;
};

template<class ContainerAllocator>
struct DataType< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detect_suspicious_person/Camera_msgRequest";
  }

  static const char* value(const ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string w\n"
"int16 n\n"
;
  }

  static const char* value(const ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.w);
      stream.next(m.n);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Camera_msgRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detect_suspicious_person::Camera_msgRequest_<ContainerAllocator>& v)
  {
    s << indent << "w: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.w);
    s << indent << "n: ";
    Printer<int16_t>::stream(s, indent + "  ", v.n);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECT_SUSPICIOUS_PERSON_MESSAGE_CAMERA_MSGREQUEST_H
