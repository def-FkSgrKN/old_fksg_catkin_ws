// Generated by gencpp from file carry_food/PositionValues.msg
// DO NOT EDIT!


#ifndef CARRY_FOOD_MESSAGE_POSITIONVALUES_H
#define CARRY_FOOD_MESSAGE_POSITIONVALUES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace carry_food
{
template <class ContainerAllocator>
struct PositionValues_
{
  typedef PositionValues_<ContainerAllocator> Type;

  PositionValues_()
    : up_down(0)
    , left_right(0)
    , far_near(0)  {
    }
  PositionValues_(const ContainerAllocator& _alloc)
    : up_down(0)
    , left_right(0)
    , far_near(0)  {
  (void)_alloc;
    }



   typedef int16_t _up_down_type;
  _up_down_type up_down;

   typedef int16_t _left_right_type;
  _left_right_type left_right;

   typedef int16_t _far_near_type;
  _far_near_type far_near;





  typedef boost::shared_ptr< ::carry_food::PositionValues_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::carry_food::PositionValues_<ContainerAllocator> const> ConstPtr;

}; // struct PositionValues_

typedef ::carry_food::PositionValues_<std::allocator<void> > PositionValues;

typedef boost::shared_ptr< ::carry_food::PositionValues > PositionValuesPtr;
typedef boost::shared_ptr< ::carry_food::PositionValues const> PositionValuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::carry_food::PositionValues_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::carry_food::PositionValues_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::carry_food::PositionValues_<ContainerAllocator1> & lhs, const ::carry_food::PositionValues_<ContainerAllocator2> & rhs)
{
  return lhs.up_down == rhs.up_down &&
    lhs.left_right == rhs.left_right &&
    lhs.far_near == rhs.far_near;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::carry_food::PositionValues_<ContainerAllocator1> & lhs, const ::carry_food::PositionValues_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace carry_food

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::carry_food::PositionValues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carry_food::PositionValues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::carry_food::PositionValues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::carry_food::PositionValues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carry_food::PositionValues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carry_food::PositionValues_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::carry_food::PositionValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c3369c7842f910b725c6219b2e1c4da";
  }

  static const char* value(const ::carry_food::PositionValues_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c3369c7842f910bULL;
  static const uint64_t static_value2 = 0x725c6219b2e1c4daULL;
};

template<class ContainerAllocator>
struct DataType< ::carry_food::PositionValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "carry_food/PositionValues";
  }

  static const char* value(const ::carry_food::PositionValues_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::carry_food::PositionValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 up_down\n"
"int16 left_right\n"
"int16 far_near\n"
;
  }

  static const char* value(const ::carry_food::PositionValues_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::carry_food::PositionValues_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.up_down);
      stream.next(m.left_right);
      stream.next(m.far_near);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionValues_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::carry_food::PositionValues_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::carry_food::PositionValues_<ContainerAllocator>& v)
  {
    s << indent << "up_down: ";
    Printer<int16_t>::stream(s, indent + "  ", v.up_down);
    s << indent << "left_right: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_right);
    s << indent << "far_near: ";
    Printer<int16_t>::stream(s, indent + "  ", v.far_near);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARRY_FOOD_MESSAGE_POSITIONVALUES_H
